{
  "version": 3,
  "sources": ["../src/AutoGenerator.ts"],
  "sourcesContent": ["/**\n * @file Modified version of AutoGenerator from sequelize-auto.\n *\n * Changes:\n * - Add `tsEsm` option so TypeScript files import `.js`, e.g.\n *   `from \"./MyModel.js\"`, required for TypeScript/Node ESM compatibility.\n * - Add `declare ` before class properties (TypeScript).\n * - Remove `:!` after class properties (TypeScript).\n * - Add options `initModelsDefault`, `noSchemas` and `tsEsm`.\n */\nimport type { ModelerOptions } from \"./types\";\nimport _ from \"lodash\";\nimport { ColumnDescription } from \"sequelize\";\nimport {\n  DialectOptions,\n  FKSpec,\n} from \"sequelize-auto/types/dialects/dialect-options\";\nimport {\n  AutoOptions,\n  CaseFileOption,\n  CaseOption,\n  Field,\n  IndexSpec,\n  LangOption,\n  makeIndent,\n  makeTableName,\n  pluralize,\n  qNameJoin,\n  qNameSplit,\n  recase,\n  Relation,\n  singularize,\n  TableData,\n  TSField,\n} from \"sequelize-auto/lib/types\";\n\n/** Generates text from each table in TableData */\nexport class AutoGenerator {\n  dialect: DialectOptions;\n  tables: { [tableName: string]: { [fieldName: string]: ColumnDescription } };\n  foreignKeys: { [tableName: string]: { [fieldName: string]: FKSpec } };\n  hasTriggerTables: { [tableName: string]: boolean };\n  indexes: { [tableName: string]: IndexSpec[] };\n  relations: Relation[];\n  space: string[];\n  options: {\n    indentation?: number;\n    spaces?: boolean;\n    lang?: LangOption;\n    caseModel?: CaseOption;\n    caseProp?: CaseOption;\n    caseFile?: CaseFileOption;\n    skipFields?: string[];\n    additional?: any;\n    schema?: string;\n    singularize: boolean;\n    useDefine: boolean;\n    noIndexes?: boolean;\n  } & ModelerOptions;\n  /** Metadata collected for use in creating TypeBox schemas. */\n  meta: {\n    [tableName: string]: {\n      [fieldName: string]: {\n        /** This is currently only used to detect when SafeDate is needed. */\n        dateFormat?: \"date\" | \"datetime\";\n        length?: number;\n      };\n    };\n  };\n\n  constructor(\n    tableData: TableData,\n    dialect: DialectOptions,\n    options: AutoOptions & ModelerOptions,\n  ) {\n    this.tables = tableData.tables;\n    this.foreignKeys = tableData.foreignKeys;\n    this.hasTriggerTables = tableData.hasTriggerTables;\n    this.indexes = tableData.indexes;\n    this.relations = tableData.relations;\n    this.dialect = dialect;\n    this.options = options;\n    this.options.lang = this.options.lang || \"es5\";\n    this.space = makeIndent(this.options.spaces, this.options.indentation);\n    this.meta = {};\n  }\n\n  makeHeaderTemplate(\n    table: string,\n    params: {\n      associations: {\n        names: string[];\n      };\n    },\n  ) {\n    const tbl = this.tables[table]!;\n    const meta = this.meta[table];\n    const fields = _.keys(tbl);\n    const importOptional =\n      this.getTypeScriptCreationOptionalFields(table).length > 0;\n    const importTypeBox = !this.options.noSchemas;\n    const importSafeDate =\n      importTypeBox && fields.some((field) => !!meta?.[field]?.dateFormat);\n    // Doing new imports a little different...\n    const Includeable =\n      params.associations.names.length > 0 ? \", Includeable\" : \"\";\n\n    let header = \"\";\n    const sp = this.space[1];\n\n    if (this.options.lang === \"ts\") {\n      header += \"import * as Sequelize from 'sequelize';\\n\";\n      if (importOptional) {\n        header += `import { DataTypes${Includeable}, Model, Optional } from 'sequelize';\\n`;\n      } else {\n        header += `import { DataTypes${Includeable}, Model } from 'sequelize';\\n`;\n      }\n      if (importTypeBox) {\n        header += \"import { \";\n        if (importOptional) header += \"Maybe, \";\n        if (importSafeDate) header += \"SafeDate, \";\n        // TODO: Make an option to configure this import path...\n        header += \"Static, Type } from '../../common/typing.js';\\n\";\n      }\n    } else if (this.options.lang === \"es6\") {\n      header += \"const Sequelize = require('sequelize');\\n\";\n      header += \"module.exports = (sequelize, DataTypes) => {\\n\";\n      header += sp + \"return #TABLE#.init(sequelize, DataTypes);\\n\";\n      header += \"}\\n\\n\";\n      header += \"class #TABLE# extends Sequelize.Model {\\n\";\n      header += sp + \"static init(sequelize, DataTypes) {\\n\";\n      if (this.options.useDefine) {\n        header += sp + \"return sequelize.define('#TABLE#', {\\n\";\n      } else {\n        header += sp + \"return super.init({\\n\";\n      }\n    } else if (this.options.lang === \"esm\") {\n      header += \"import _sequelize from 'sequelize';\\n\";\n      header += \"const { Model, Sequelize } = _sequelize;\\n\\n\";\n      header += \"export default class #TABLE# extends Model {\\n\";\n      header += sp + \"static init(sequelize, DataTypes) {\\n\";\n      if (this.options.useDefine) {\n        header += sp + \"return sequelize.define('#TABLE#', {\\n\";\n      } else {\n        header += sp + \"return super.init({\\n\";\n      }\n    } else {\n      header += \"const Sequelize = require('sequelize');\\n\";\n      header += \"module.exports = function(sequelize, DataTypes) {\\n\";\n      header += sp + \"return sequelize.define('#TABLE#', {\\n\";\n    }\n    return header;\n  }\n\n  generateText() {\n    const tableNames = _.keys(this.tables);\n\n    const text: { [name: string]: string } = {};\n    tableNames.forEach((table) => {\n      let str = \"\";\n      const [_schemaName, tableNameOrig = null] = qNameSplit(table);\n      const tableName = makeTableName(\n        this.options.caseModel,\n        tableNameOrig,\n        this.options.singularize,\n        this.options.lang,\n      );\n\n      const associations = this.addTypeScriptAssociationMixins(table);\n      if (this.options.lang === \"ts\") {\n        const needed = _.keys(associations.needed).sort();\n        needed.forEach((fkTable) => {\n          const set = associations.needed[fkTable];\n          const [_fkSchema, fkTableName = null] = qNameSplit(fkTable);\n          const filename = recase(\n            this.options.caseFile,\n            fkTableName,\n            this.options.singularize,\n          );\n          str += \"import type { \";\n          str += Array.from(set!.values()).sort().join(\", \");\n          if (this.options.lang === \"ts\" && this.options.tsEsm) {\n            // NOTE: For \"Node modules\" compat, import .js file even for .ts files.\n            str += ` } from './${filename}.js';\\n`;\n          } else {\n            str += ` } from './${filename}';\\n`;\n          }\n        });\n\n        str += \"\\nexport interface #TABLE#Attributes {\\n\";\n        str += this.addTypeScriptFields(table, true) + \"}\\n\\n\";\n\n        const primaryKeys = this.getTypeScriptPrimaryKeys(table);\n\n        if (primaryKeys.length) {\n          str += `export type #TABLE#Pk = ${primaryKeys\n            .map((k) => `\"${recase(this.options.caseProp, k)}\"`)\n            .join(\" | \")};\\n`;\n          str += `export type #TABLE#Id = #TABLE#[#TABLE#Pk];\\n`;\n        }\n\n        const creationOptionalFields =\n          this.getTypeScriptCreationOptionalFields(table);\n\n        if (creationOptionalFields.length) {\n          str += `export type #TABLE#OptionalAttributes = ${creationOptionalFields\n            .map((k) => `\"${recase(this.options.caseProp, k)}\"`)\n            .join(\" | \")};\\n`;\n          str +=\n            \"export type #TABLE#CreationAttributes = Optional<#TABLE#Attributes, #TABLE#OptionalAttributes>;\\n\\n\";\n        } else {\n          str +=\n            \"export type #TABLE#CreationAttributes = #TABLE#Attributes;\\n\\n\";\n        }\n\n        str +=\n          \"export class #TABLE# extends Model<#TABLE#Attributes, #TABLE#CreationAttributes> implements #TABLE#Attributes {\\n\";\n        str += this.addTypeScriptFields(table, false);\n        str += \"\\n\" + associations.str;\n        str +=\n          \"\\n\" +\n          this.space[1] +\n          \"static initModel(sequelize: Sequelize.Sequelize): typeof #TABLE# {\\n\";\n\n        if (this.options.useDefine) {\n          str += this.space[2] + \"return sequelize.define('#TABLE#', {\\n\";\n        } else {\n          str += this.space[2] + \"return #TABLE#.init({\\n\";\n        }\n      }\n\n      str += this.addTable(table);\n      // str now ends with `}` inside `return #TABLE#.init({`.\n\n      const lang = this.options.lang;\n      if (lang === \"ts\" && this.options.useDefine) {\n        str += \") as typeof #TABLE#;\\n\";\n      } else {\n        str += \");\\n\";\n        // str now ends with `});` to finish `return #TABLE#.init({`.\n      }\n\n      if (lang === \"es6\" || lang === \"esm\" || lang === \"ts\") {\n        if (this.options.useDefine) {\n          str += this.space[1] + \"}\\n}\\n\";\n        } else {\n          str +=\n            this.space[1] +\n            \"}\\n\" + // End `static initModel() {`...\n            \"}\\n\"; // End `export class #TABLE# {`\n        }\n      } else {\n        str += \"};\\n\";\n      }\n\n      if (lang === \"ts\") {\n        str += this.addNamespacedHelpers(table, {\n          associations,\n        });\n      }\n\n      const re = new RegExp(\"#TABLE#\", \"g\");\n      str = str.replace(re, tableName);\n\n      text[table] =\n        this.makeHeaderTemplate(table, {\n          associations,\n        }) + str;\n    });\n\n    return text;\n  }\n\n  // Create a string for the model of the table\n  private addTable(table: string) {\n    const [schemaName, tableNameOrig] = qNameSplit(table);\n    const space = this.space;\n    let timestamps =\n      (this.options.additional &&\n        this.options.additional.timestamps === true) ||\n      false;\n    let paranoid =\n      (this.options.additional && this.options.additional.paranoid === true) ||\n      false;\n\n    // add all the fields\n    let str = \"\";\n    const fields = _.keys(this.tables[table]);\n    fields.forEach((field, index) => {\n      timestamps ||= this.isTimestampField(field);\n      paranoid ||= this.isParanoidField(field);\n\n      str += this.addField(table, field);\n    });\n\n    // trim off last \",\\n\"\n    str = str.substring(0, str.length - 2) + \"\\n\";\n\n    // add the table options\n    str += space[1] + \"}, {\\n\";\n    if (!this.options.useDefine) {\n      str += space[2] + \"sequelize,\\n\";\n    }\n    str += space[2] + \"tableName: '\" + tableNameOrig + \"',\\n\";\n\n    if (schemaName && this.dialect.hasSchema) {\n      str += space[2] + \"schema: '\" + schemaName + \"',\\n\";\n    }\n\n    if (this.hasTriggerTables[table]) {\n      str += space[2] + \"hasTrigger: true,\\n\";\n    }\n\n    str += space[2] + \"timestamps: \" + timestamps + \",\\n\";\n    if (paranoid) {\n      str += space[2] + \"paranoid: true,\\n\";\n    }\n\n    // conditionally add additional options\n    const hasadditional =\n      _.isObject(this.options.additional) &&\n      _.keys(this.options.additional).length > 0;\n    if (hasadditional) {\n      _.each(this.options.additional, (value, key) => {\n        if (key === \"name\") {\n          // name: true - preserve table name always\n          str += space[2] + \"name: {\\n\";\n          str += space[3] + \"singular: '\" + table + \"',\\n\";\n          str += space[3] + \"plural: '\" + table + \"'\\n\";\n          str += space[2] + \"},\\n\";\n        } else if (key === \"timestamps\" || key === \"paranoid\") {\n          // handled above\n        } else {\n          value = _.isBoolean(value) ? value : \"'\" + value + \"'\";\n          str += space[2] + key + \": \" + value + \",\\n\";\n        }\n      });\n    }\n\n    // add indexes\n    if (!this.options.noIndexes) {\n      str += this.addIndexes(table);\n    }\n\n    str = space[2] + str.trim();\n    str = str.substring(0, str.length - 1);\n\n    // End first `{` in `return #TABLE#.init({` or `return sequelize.define({`.\n    str += \"\\n\" + space[1] + \"}\";\n\n    return str;\n  }\n\n  // Create a string containing field attributes (type, defaultValue, etc.)\n  private addField(table: string, field: string): string {\n    // #region Allow timestamp and paranoid fields to be generated.\n    // ignore Sequelize standard fields\n    // const additional = this.options.additional;\n    // if (\n    //   additional &&\n    //   additional.timestamps !== false &&\n    //   (this.isTimestampField(field) || this.isParanoidField(field))\n    // ) {\n    //   return \"\";\n    // }\n    // #endregion\n\n    if (this.isIgnoredField(field)) {\n      return \"\";\n    }\n\n    // Find foreign key\n    const foreignKey =\n      this.foreignKeys[table] && this.foreignKeys[table]![field]\n        ? this.foreignKeys[table]![field]\n        : null;\n    const fieldObj = this.tables[table]![field] as unknown as Field;\n\n    if (_.isObject(foreignKey)) {\n      fieldObj.foreignKey = foreignKey;\n    }\n\n    const fieldName = recase(this.options.caseProp, field);\n    let str = this.quoteName(fieldName) + \": {\\n\";\n\n    const quoteWrapper = '\"';\n\n    const unique =\n      fieldObj.unique || (fieldObj.foreignKey && fieldObj.foreignKey.isUnique);\n\n    const isSerialKey =\n      (fieldObj.foreignKey && fieldObj.foreignKey.isSerialKey) ||\n      (this.dialect.isSerialKey && this.dialect.isSerialKey(fieldObj));\n\n    let wroteAutoIncrement = false;\n    const space = this.space;\n\n    // column's attributes\n    const fieldAttrs = _.keys(fieldObj);\n    fieldAttrs.forEach((attr) => {\n      // We don't need the special attribute from postgresql; \"unique\" is handled separately\n      if (attr === \"special\" || attr === \"elementType\" || attr === \"unique\") {\n        return true;\n      }\n\n      if (isSerialKey && !wroteAutoIncrement) {\n        str += space[3] + \"autoIncrement: true,\\n\";\n        // Resort to Postgres' GENERATED BY DEFAULT AS IDENTITY instead of SERIAL\n        if (\n          this.dialect.name === \"postgres\" &&\n          fieldObj.foreignKey &&\n          fieldObj.foreignKey.isPrimaryKey === true &&\n          (fieldObj.foreignKey.generation === \"ALWAYS\" ||\n            fieldObj.foreignKey.generation === \"BY DEFAULT\")\n        ) {\n          str += space[3] + \"autoIncrementIdentity: true,\\n\";\n        }\n        wroteAutoIncrement = true;\n      }\n\n      if (attr === \"foreignKey\") {\n        if (foreignKey && foreignKey.isForeignKey) {\n          str += space[3] + \"references: {\\n\";\n          str +=\n            space[4] +\n            \"model: '\" +\n            fieldObj[attr].foreignSources.target_table +\n            \"',\\n\";\n          str +=\n            space[4] +\n            \"key: '\" +\n            fieldObj[attr].foreignSources.target_column +\n            \"'\\n\";\n          str += space[3] + \"}\";\n        } else {\n          return true;\n        }\n      } else if (attr === \"references\") {\n        // covered by foreignKey\n        return true;\n      } else if (attr === \"primaryKey\") {\n        if (\n          (fieldObj as any)[attr] === true &&\n          (!_.has(fieldObj, \"foreignKey\") || !!fieldObj.foreignKey.isPrimaryKey)\n        ) {\n          str += space[3] + \"primaryKey: true\";\n        } else {\n          return true;\n        }\n      } else if (attr === \"autoIncrement\") {\n        if ((fieldObj as any)[attr] === true && !wroteAutoIncrement) {\n          str += space[3] + \"autoIncrement: true,\\n\";\n          // Resort to Postgres' GENERATED BY DEFAULT AS IDENTITY instead of SERIAL\n          if (\n            this.dialect.name === \"postgres\" &&\n            fieldObj.foreignKey &&\n            fieldObj.foreignKey.isPrimaryKey === true &&\n            (fieldObj.foreignKey.generation === \"ALWAYS\" ||\n              fieldObj.foreignKey.generation === \"BY DEFAULT\")\n          ) {\n            str += space[3] + \"autoIncrementIdentity: true,\\n\";\n          }\n          wroteAutoIncrement = true;\n        }\n        return true;\n      } else if (attr === \"allowNull\") {\n        str += space[3] + attr + \": \" + (fieldObj as any)[attr];\n      } else if (attr === \"defaultValue\") {\n        let defaultVal = (fieldObj as any).defaultValue;\n        if (\n          this.dialect.name === \"mssql\" &&\n          defaultVal &&\n          defaultVal.toLowerCase() === \"(newid())\"\n        ) {\n          defaultVal = null as any; // disable adding \"default value\" attribute for UUID fields if generating for MS SQL\n        }\n        if (\n          this.dialect.name === \"mssql\" &&\n          ([\"(NULL)\", \"NULL\"].includes(defaultVal) ||\n            typeof defaultVal === \"undefined\")\n        ) {\n          defaultVal = null as any; // Override default NULL in MS SQL to javascript null\n        }\n\n        if (defaultVal === null || defaultVal === undefined) {\n          return true;\n        }\n        if (isSerialKey) {\n          return true; // value generated in the database\n        }\n\n        let val_text = defaultVal as string;\n        if (_.isString(defaultVal)) {\n          const field_type = (fieldObj as any).type.toLowerCase();\n          defaultVal = this.escapeSpecial(defaultVal);\n\n          while (defaultVal.startsWith(\"(\") && defaultVal.endsWith(\")\")) {\n            // remove extra parens around mssql defaults\n            defaultVal = defaultVal.replace(/^[(]/, \"\").replace(/[)]$/, \"\");\n          }\n\n          if (\n            field_type === \"bit(1)\" ||\n            field_type === \"bit\" ||\n            field_type === \"boolean\"\n          ) {\n            // convert string to boolean\n            val_text = /1|true/i.test(defaultVal) ? \"true\" : \"false\";\n          } else if (this.isArray(field_type)) {\n            // remove outer {}\n            val_text = defaultVal.replace(/^{/, \"\").replace(/}$/, \"\");\n            if (val_text && this.isString(fieldObj.elementType)) {\n              // quote the array elements\n              val_text = val_text\n                .split(\",\")\n                .map((s) => `\"${s}\"`)\n                .join(\",\");\n            }\n            val_text = `[${val_text}]`;\n          } else if (field_type.match(/^(json)/)) {\n            // don't quote json. Unescape quotes.\n            val_text = defaultVal.replace(/\\\\\"/g, '\"');\n          } else if (\n            field_type === \"uuid\" &&\n            (defaultVal === \"gen_random_uuid()\" ||\n              defaultVal === \"uuid_generate_v4()\")\n          ) {\n            val_text = \"DataTypes.UUIDV4\";\n          } else if (defaultVal.match(/\\w+\\(\\)$/)) {\n            // replace db function with sequelize function\n            val_text =\n              \"Sequelize.Sequelize.fn('\" +\n              defaultVal.replace(/\\(\\)$/g, \"\") +\n              \"')\";\n          } else if (this.isNumber(field_type)) {\n            if (defaultVal.match(/\\(\\)/g)) {\n              // assume it's a server function if it contains parens\n              val_text = \"Sequelize.Sequelize.literal('\" + defaultVal + \"')\";\n            } else {\n              // don't quote numbers\n              val_text = defaultVal;\n            }\n          } else if (defaultVal.match(/\\(\\)/g)) {\n            // embedded function, pass as literal\n            val_text = \"Sequelize.Sequelize.literal('\" + defaultVal + \"')\";\n          } else if (\n            field_type.indexOf(\"date\") === 0 ||\n            field_type.indexOf(\"timestamp\") === 0\n          ) {\n            if (\n              _.includes(\n                [\n                  \"current_timestamp\",\n                  \"current_date\",\n                  \"current_time\",\n                  \"localtime\",\n                  \"localtimestamp\",\n                ],\n                defaultVal.toLowerCase(),\n              )\n            ) {\n              val_text = \"Sequelize.Sequelize.literal('\" + defaultVal + \"')\";\n            } else {\n              val_text = quoteWrapper + defaultVal + quoteWrapper;\n            }\n          } else {\n            val_text = quoteWrapper + defaultVal + quoteWrapper;\n          }\n        }\n\n        // val_text = _.isString(val_text) && !val_text.match(/^sequelize\\.[^(]+\\(.*\\)$/)\n        // ? self.sequelize.escape(_.trim(val_text, '\"'), null, self.options.dialect)\n        // : val_text;\n        // don't prepend N for MSSQL when building models...\n        // defaultVal = _.trimStart(defaultVal, 'N');\n\n        str += space[3] + attr + \": \" + val_text;\n      } else if (\n        attr === \"comment\" &&\n        (!(fieldObj as any)[attr] || this.dialect.name === \"mssql\")\n      ) {\n        return true;\n      } else {\n        let val =\n          attr !== \"type\" ? null : this.getSqType(table, field, fieldObj, attr);\n        if (val == null) {\n          val = (fieldObj as any)[attr];\n          val = _.isString(val)\n            ? quoteWrapper + this.escapeSpecial(val) + quoteWrapper\n            : val;\n        }\n        str += space[3] + attr + \": \" + val;\n      }\n\n      str += \",\\n\";\n    });\n\n    if (unique) {\n      const uniq = _.isString(unique)\n        ? quoteWrapper + unique.replace(/\\\"/g, '\\\\\"') + quoteWrapper\n        : unique;\n      str += space[3] + \"unique: \" + uniq + \",\\n\";\n    }\n\n    if (field !== fieldName) {\n      str += space[3] + \"field: '\" + field + \"',\\n\";\n    }\n\n    // removes the last `,` within the attribute options\n    str = str.trim().replace(/,+$/, \"\") + \"\\n\";\n    str = space[2] + str + space[2] + \"},\\n\";\n    return str;\n  }\n\n  private addIndexes(table: string) {\n    const indexes = this.indexes[table];\n    const space = this.space;\n    let str = \"\";\n    if (indexes && indexes.length) {\n      str += space[2] + \"indexes: [\\n\";\n      indexes.forEach((idx) => {\n        str += space[3] + \"{\\n\";\n        if (idx.name) {\n          str += space[4] + `name: \"${idx.name}\",\\n`;\n        }\n        if (idx.unique) {\n          str += space[4] + \"unique: true,\\n\";\n        }\n        if (idx.type) {\n          if ([\"UNIQUE\", \"FULLTEXT\", \"SPATIAL\"].includes(idx.type)) {\n            str += space[4] + `type: \"${idx.type}\",\\n`;\n          } else {\n            str += space[4] + `using: \"${idx.type}\",\\n`;\n          }\n        }\n        str += space[4] + `fields: [\\n`;\n        idx.fields.forEach((ff) => {\n          str += space[5] + `{ name: \"${ff.attribute}\"`;\n          if (ff.collate) {\n            str += `, collate: \"${ff.collate}\"`;\n          }\n          if (ff.length) {\n            str += `, length: ${ff.length}`;\n          }\n          if (ff.order && ff.order !== \"ASC\") {\n            str += `, order: \"${ff.order}\"`;\n          }\n          str += \" },\\n\";\n        });\n        str += space[4] + \"]\\n\";\n        str += space[3] + \"},\\n\";\n      });\n      str += space[2] + \"],\\n\";\n    }\n    return str;\n  }\n\n  /** Get the sequelize type from the Field */\n  private getSqType(\n    table: string,\n    field: string,\n    fieldObj: Field,\n    attr: string,\n  ): string {\n    const attrValue = (fieldObj as any)[attr];\n    if (!attrValue.toLowerCase) {\n      console.log(\"attrValue\", attr, attrValue);\n      return attrValue;\n    }\n    const type: string = attrValue.toLowerCase();\n    /** IF there is a match, the string is `(999)` with parens... */\n    const length = type.match(/\\(\\d+\\)/);\n    const precision = type.match(/\\(\\d+,\\d+\\)/);\n    let val = null;\n    let typematch = null;\n\n    if (\n      type === \"boolean\" ||\n      type === \"bit(1)\" ||\n      type === \"bit\" ||\n      type === \"tinyint(1)\"\n    ) {\n      val = \"DataTypes.BOOLEAN\";\n\n      // postgres range types\n    } else if (type === \"numrange\") {\n      val = \"DataTypes.RANGE(DataTypes.DECIMAL)\";\n    } else if (type === \"int4range\") {\n      val = \"DataTypes.RANGE(DataTypes.INTEGER)\";\n    } else if (type === \"int8range\") {\n      val = \"DataTypes.RANGE(DataTypes.BIGINT)\";\n    } else if (type === \"daterange\") {\n      val = \"DataTypes.RANGE(DataTypes.DATEONLY)\";\n    } else if (type === \"tsrange\" || type === \"tstzrange\") {\n      val = \"DataTypes.RANGE(DataTypes.DATE)\";\n    } else if (\n      (typematch = type.match(/^(bigint|smallint|mediumint|tinyint|int)/))\n    ) {\n      // integer subtypes\n      val =\n        \"DataTypes.\" +\n        (typematch[0] === \"int\" ? \"INTEGER\" : typematch[0].toUpperCase());\n      if (/unsigned/i.test(type)) {\n        val += \".UNSIGNED\";\n      }\n      if (/zerofill/i.test(type)) {\n        val += \".ZEROFILL\";\n      }\n    } else if (type === \"nvarchar(max)\" || type === \"varchar(max)\") {\n      val = \"DataTypes.TEXT\";\n    } else if (type.match(/n?varchar|string|varying/)) {\n      val = \"DataTypes.STRING\" + (!_.isNull(length) ? length : \"\");\n      if (length !== null && attr === \"type\") {\n        _.set(\n          this.meta,\n          `${table}.${field}.length`,\n          parseInt((\"\" + length).substring(1)),\n        );\n      }\n    } else if (type.match(/^n?char/)) {\n      val = \"DataTypes.CHAR\" + (!_.isNull(length) ? length : \"\");\n      if (length !== null && attr === \"type\") {\n        _.set(\n          this.meta,\n          `${table}.${field}.length`,\n          parseInt((\"\" + length).substring(1)),\n        );\n      }\n    } else if (type.match(/^real/)) {\n      val = \"DataTypes.REAL\";\n    } else if (type.match(/text$/)) {\n      val = \"DataTypes.TEXT\" + (!_.isNull(length) ? length : \"\");\n    } else if (type === \"date\") {\n      val = \"DataTypes.DATEONLY\";\n    } else if (type.match(/^(date|timestamp|year)/)) {\n      val = \"DataTypes.DATE\" + (!_.isNull(length) ? length : \"\");\n      if (type.match(/^(datetime|timestamp)/)) {\n        _.set(this.meta, `${table}.${field}.dateFormat`, \"datetime\");\n      }\n    } else if (type.match(/^(time)/)) {\n      val = \"DataTypes.TIME\";\n    } else if (type.match(/^(float|float4)/)) {\n      val = \"DataTypes.FLOAT\" + (!_.isNull(precision) ? precision : \"\");\n    } else if (type.match(/^(decimal|numeric)/)) {\n      val = \"DataTypes.DECIMAL\" + (!_.isNull(precision) ? precision : \"\");\n    } else if (type.match(/^money/)) {\n      val = \"DataTypes.DECIMAL(19,4)\";\n    } else if (type.match(/^smallmoney/)) {\n      val = \"DataTypes.DECIMAL(10,4)\";\n    } else if (type.match(/^(float8|double)/)) {\n      val = \"DataTypes.DOUBLE\" + (!_.isNull(precision) ? precision : \"\");\n    } else if (type.match(/^uuid|uniqueidentifier/)) {\n      val = \"DataTypes.UUID\";\n    } else if (type.match(/^jsonb/)) {\n      val = \"DataTypes.JSONB\";\n    } else if (type.match(/^json/)) {\n      val = \"DataTypes.JSON\";\n    } else if (type.match(/^geometry/)) {\n      const gtype = fieldObj.elementType ? `(${fieldObj.elementType})` : \"\";\n      val = `DataTypes.GEOMETRY${gtype}`;\n    } else if (type.match(/^geography/)) {\n      const gtype = fieldObj.elementType ? `(${fieldObj.elementType})` : \"\";\n      val = `DataTypes.GEOGRAPHY${gtype}`;\n    } else if (type.match(/^array/)) {\n      const eltype = this.getSqType(table, field, fieldObj, \"elementType\");\n      val = `DataTypes.ARRAY(${eltype})`;\n    } else if (type.match(/(binary|image|blob|bytea)/)) {\n      val = \"DataTypes.BLOB\";\n    } else if (type.match(/^hstore/)) {\n      val = \"DataTypes.HSTORE\";\n    } else if (type.match(/^inet/)) {\n      val = \"DataTypes.INET\";\n    } else if (type.match(/^cidr/)) {\n      val = \"DataTypes.CIDR\";\n    } else if (type.match(/^oid/)) {\n      val = \"DataTypes.INTEGER\";\n    } else if (type.match(/^macaddr/)) {\n      val = \"DataTypes.MACADDR\";\n    } else if (type.match(/^enum(\\(.*\\))?$/)) {\n      const enumValues = this.getEnumValues(fieldObj);\n      val = `DataTypes.ENUM(${enumValues})`;\n    }\n\n    return val as string;\n  }\n\n  private getTypeScriptPrimaryKeys(table: string): Array<string> {\n    const fields = _.keys(this.tables[table]);\n    return fields.filter((field): boolean => {\n      const fieldObj = this.tables![table]![field]!;\n      return fieldObj[\"primaryKey\"];\n    });\n  }\n\n  private getTypeScriptCreationOptionalFields(table: string): Array<string> {\n    const fields = _.keys(this.tables[table]);\n    return fields.filter((field): boolean => {\n      const fieldObj = this.tables[table]![field]!;\n      return (\n        fieldObj.allowNull ||\n        !!fieldObj.defaultValue ||\n        fieldObj.defaultValue === \"\" ||\n        fieldObj.autoIncrement ||\n        this.isTimestampField(field)\n      );\n    });\n  }\n\n  /** Add schema to table so it will match the relation data.  Fixes mysql problem. */\n  private addSchemaForRelations(table: string) {\n    if (\n      !table.includes(\".\") &&\n      !this.relations.some((rel) => rel.childTable === table)\n    ) {\n      // if no tables match the given table, then assume we need to fix the schema\n      const first = this.relations.find((rel) => !!rel.childTable);\n      if (first) {\n        const [schemaName, _tableName] = qNameSplit(first.childTable);\n        if (schemaName) {\n          table = qNameJoin(schemaName, table);\n        }\n      }\n    }\n    return table;\n  }\n\n  private addTypeScriptAssociationMixins(table: string) {\n    const sp = this.space[1];\n    const needed: Record<string, Set<string>> = {};\n    const names: string[] = [];\n    let str = \"\";\n\n    table = this.addSchemaForRelations(table);\n\n    this.relations.forEach((rel) => {\n      if (!rel.isM2M) {\n        if (rel.childTable === table) {\n          // current table is a child that belongsTo parent\n          const pparent = _.upperFirst(rel.parentProp);\n          str += `${sp}// ${rel.childModel} belongsTo ${rel.parentModel} via ${rel.parentId}\\n`;\n          str += `${sp}declare ${rel.parentProp}?: ${rel.parentModel};\\n`;\n          str += `${sp}declare get${pparent}: Sequelize.BelongsToGetAssociationMixin<${rel.parentModel}>;\\n`;\n          str += `${sp}declare set${pparent}: Sequelize.BelongsToSetAssociationMixin<${rel.parentModel}, ${rel.parentModel}Id>;\\n`;\n          str += `${sp}declare create${pparent}: Sequelize.BelongsToCreateAssociationMixin<${rel.parentModel}>;\\n`;\n          needed[rel.parentTable] ??= new Set();\n          needed[rel.parentTable]!.add(rel.parentModel);\n          needed[rel.parentTable]!.add(rel.parentModel + \"Id\");\n          // Add association name used by our `include` function.\n          names.push(rel.parentProp);\n        } else if (rel.parentTable === table) {\n          needed[rel.childTable] ??= new Set();\n          const pchild = _.upperFirst(rel.childProp);\n          if (rel.isOne) {\n            // const hasModelSingular = singularize(hasModel);\n            str += `${sp}// ${rel.parentModel} hasOne ${rel.childModel} via ${rel.parentId}\\n`;\n            str += `${sp}declare ${rel.childProp}?: ${rel.childModel};\\n`;\n            str += `${sp}declare get${pchild}: Sequelize.HasOneGetAssociationMixin<${rel.childModel}>;\\n`;\n            str += `${sp}declare set${pchild}: Sequelize.HasOneSetAssociationMixin<${rel.childModel}, ${rel.childModel}Id>;\\n`;\n            str += `${sp}declare create${pchild}: Sequelize.HasOneCreateAssociationMixin<${rel.childModel}>;\\n`;\n            needed[rel.childTable]!.add(rel.childModel);\n            needed[rel.childTable]!.add(`${rel.childModel}Id`);\n            needed[rel.childTable]!.add(`${rel.childModel}CreationAttributes`);\n            // Add association name used by our `include` function.\n            names.push(rel.childProp);\n          } else {\n            const hasModel = rel.childModel;\n            const sing = _.upperFirst(singularize(rel.childProp));\n            const lur = pluralize(rel.childProp);\n            const plur = _.upperFirst(lur);\n            str += `${sp}// ${rel.parentModel} hasMany ${rel.childModel} via ${rel.parentId}\\n`;\n            str += `${sp}declare ${lur}?: ${rel.childModel}[];\\n`;\n            str += `${sp}declare get${plur}: Sequelize.HasManyGetAssociationsMixin<${hasModel}>;\\n`;\n            str += `${sp}declare set${plur}: Sequelize.HasManySetAssociationsMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare add${sing}: Sequelize.HasManyAddAssociationMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare add${plur}: Sequelize.HasManyAddAssociationsMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare create${sing}: Sequelize.HasManyCreateAssociationMixin<${hasModel}>;\\n`;\n            str += `${sp}declare remove${sing}: Sequelize.HasManyRemoveAssociationMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare remove${plur}: Sequelize.HasManyRemoveAssociationsMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare has${sing}: Sequelize.HasManyHasAssociationMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare has${plur}: Sequelize.HasManyHasAssociationsMixin<${hasModel}, ${hasModel}Id>;\\n`;\n            str += `${sp}declare count${plur}: Sequelize.HasManyCountAssociationsMixin;\\n`;\n            needed[rel.childTable]!.add(hasModel);\n            needed[rel.childTable]!.add(`${hasModel}Id`);\n            // Add association name used by our `include` function.\n            names.push(lur);\n          }\n        }\n      } else {\n        // rel.isM2M\n        if (rel.parentTable === table) {\n          // many-to-many\n          const isParent = rel.parentTable === table;\n          const thisModel = isParent ? rel.parentModel : rel.childModel;\n          const otherModel = isParent ? rel.childModel : rel.parentModel;\n          const otherModelSingular = _.upperFirst(\n            singularize(isParent ? rel.childProp : rel.parentProp),\n          );\n          const lotherModelPlural = pluralize(\n            isParent ? rel.childProp : rel.parentProp,\n          );\n          const otherModelPlural = _.upperFirst(lotherModelPlural);\n          const otherTable = isParent ? rel.childTable : rel.parentTable;\n          str += `${sp}// ${thisModel} belongsToMany ${otherModel} via ${rel.parentId} and ${rel.childId}\\n`;\n          str += `${sp}declare ${lotherModelPlural}?: ${otherModel}[];\\n`;\n          str += `${sp}declare get${otherModelPlural}: Sequelize.BelongsToManyGetAssociationsMixin<${otherModel}>;\\n`;\n          str += `${sp}declare set${otherModelPlural}: Sequelize.BelongsToManySetAssociationsMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare add${otherModelSingular}: Sequelize.BelongsToManyAddAssociationMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare add${otherModelPlural}: Sequelize.BelongsToManyAddAssociationsMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare create${otherModelSingular}: Sequelize.BelongsToManyCreateAssociationMixin<${otherModel}>;\\n`;\n          str += `${sp}declare remove${otherModelSingular}: Sequelize.BelongsToManyRemoveAssociationMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare remove${otherModelPlural}: Sequelize.BelongsToManyRemoveAssociationsMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare has${otherModelSingular}: Sequelize.BelongsToManyHasAssociationMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare has${otherModelPlural}: Sequelize.BelongsToManyHasAssociationsMixin<${otherModel}, ${otherModel}Id>;\\n`;\n          str += `${sp}declare count${otherModelPlural}: Sequelize.BelongsToManyCountAssociationsMixin;\\n`;\n          needed[otherTable] ??= new Set();\n          needed[otherTable]!.add(otherModel);\n          needed[otherTable]!.add(`${otherModel}Id`);\n          // Add association name used by our `include` function.\n          names.push(lotherModelPlural);\n        }\n      }\n    });\n    if (needed[table]) {\n      delete needed[table]; // don't add import for self\n    }\n    return { names, needed, str };\n  }\n\n  private addTypeScriptFields(table: string, isInterface: boolean) {\n    const sp = this.space[1];\n    const fields = _.keys(this.tables[table]);\n    const notNull = \"\"; // isInterface ? \"\" : \"!\";\n    let str = \"\";\n    fields.forEach((field) => {\n      if (\n        !this.options.skipFields ||\n        !this.options.skipFields.includes(field)\n      ) {\n        const name = this.quoteName(recase(this.options.caseProp, field));\n        const isOptional = this.getTypeScriptFieldOptional(table, field);\n        const tsType = this.getTypeScriptType(table, field);\n        if (tsType === \"any\" && this.options.eslintIgnoreAny) {\n          str += `${sp}// eslint-disable-next-line @typescript-eslint/no-explicit-any\\n`;\n        }\n        str += `${sp}${!isInterface ? \"declare \" : \"\"}${name}${\n          isOptional ? \"?\" : notNull\n        }: ${tsType};\\n`;\n      }\n    });\n    return str;\n  }\n\n  private getTypeScriptFieldOptional(table: string, field: string) {\n    const fieldObj = this.tables[table]![field]!;\n    return fieldObj.allowNull;\n  }\n\n  private getTypeScriptType(table: string, field: string) {\n    const fieldObj = this.tables[table]![field] as TSField;\n    return this.getTypeScriptFieldType(fieldObj, \"type\");\n  }\n\n  private getTypeScriptFieldType(fieldObj: TSField, attr: keyof TSField) {\n    const rawFieldType = fieldObj[attr] || \"\";\n    const fieldType = String(rawFieldType).toLowerCase();\n\n    let jsType: string;\n\n    if (this.isArray(fieldType)) {\n      const eltype = this.getTypeScriptFieldType(fieldObj, \"elementType\");\n      jsType = eltype + \"[]\";\n    } else if (this.isNumber(fieldType)) {\n      jsType = \"number\";\n    } else if (this.isBoolean(fieldType)) {\n      jsType = \"boolean\";\n    } else if (this.isDate(fieldType)) {\n      jsType = \"Date\";\n    } else if (this.isString(fieldType)) {\n      jsType = \"string\";\n    } else if (this.isEnum(fieldType)) {\n      const values = this.getEnumValues(fieldObj);\n      jsType = values.join(\" | \");\n    } else if (this.isJSON(fieldType)) {\n      jsType = \"object\";\n    } else {\n      console.log(`Missing TypeScript type: ${fieldType || fieldObj[\"type\"]}`);\n      jsType = \"any\";\n    }\n    return jsType;\n  }\n\n  private getEnumValues(fieldObj: TSField): string[] {\n    if (fieldObj.special) {\n      // postgres\n      return fieldObj.special.map((v: string) => `\"${v}\"`);\n    } else {\n      // mysql\n      return fieldObj.type.substring(5, fieldObj.type.length - 1).split(\",\");\n    }\n  }\n\n  private isTimestampField(field: string) {\n    const additional = this.options.additional;\n    if (additional.timestamps === false) {\n      return false;\n    }\n    return (\n      (!additional.createdAt && recase(\"c\", field) === \"createdAt\") ||\n      additional.createdAt === field ||\n      (!additional.updatedAt && recase(\"c\", field) === \"updatedAt\") ||\n      additional.updatedAt === field\n    );\n  }\n\n  private isParanoidField(field: string) {\n    const additional = this.options.additional;\n    if (additional.timestamps === false || additional.paranoid === false) {\n      return false;\n    }\n    return (\n      (!additional.deletedAt && recase(\"c\", field) === \"deletedAt\") ||\n      additional.deletedAt === field\n    );\n  }\n\n  private isIgnoredField(field: string) {\n    return this.options.skipFields && this.options.skipFields.includes(field);\n  }\n\n  private escapeSpecial(val: string) {\n    if (typeof val !== \"string\") {\n      return val;\n    }\n    return val\n      .replace(/[\\\\]/g, \"\\\\\\\\\")\n      .replace(/[\\\"]/g, '\\\\\"')\n      .replace(/[\\/]/g, \"\\\\/\")\n      .replace(/[\\b]/g, \"\\\\b\")\n      .replace(/[\\f]/g, \"\\\\f\")\n      .replace(/[\\n]/g, \"\\\\n\")\n      .replace(/[\\r]/g, \"\\\\r\")\n      .replace(/[\\t]/g, \"\\\\t\");\n  }\n\n  /** Quote the name if it is not a valid identifier */\n  private quoteName(name: string) {\n    return /^[$A-Z_][0-9A-Z_$]*$/i.test(name) ? name : \"'\" + name + \"'\";\n  }\n\n  private isNumber(fieldType: string): boolean {\n    return /^(smallint|mediumint|tinyint|int|bigint|float|money|smallmoney|double|decimal|numeric|real|oid)/.test(\n      fieldType,\n    );\n  }\n\n  private isBoolean(fieldType: string): boolean {\n    return /^(boolean|bit)/.test(fieldType);\n  }\n\n  private isDate(fieldType: string): boolean {\n    return /^(datetime|timestamp)/.test(fieldType);\n  }\n\n  private isString(fieldType: string): boolean {\n    return /^(char|nchar|string|varying|varchar|nvarchar|text|longtext|mediumtext|tinytext|ntext|uuid|uniqueidentifier|date|time|inet|cidr|macaddr)/.test(\n      fieldType,\n    );\n  }\n\n  private isArray(fieldType: string): boolean {\n    return /(^array)|(range$)/.test(fieldType);\n  }\n\n  private isEnum(fieldType: string): boolean {\n    return /^(enum)/.test(fieldType);\n  }\n\n  private isJSON(fieldType: string): boolean {\n    return /^(json|jsonb)/.test(fieldType);\n  }\n\n  private addNamespacedHelpers(\n    table: string,\n    params: {\n      associations: {\n        names: string[];\n      };\n    },\n  ) {\n    // TODO: if (this.options.noNamespacedHelpers) return \"\";\n    const content = [\n      this.addTypeBoxSchemas(table),\n      this.addIncludeFunction(params.associations.names),\n    ].join(\"\");\n    if (!content) return \"\";\n    return `\nexport namespace #TABLE# {${content}}\n`;\n  }\n\n  private addIncludeFunction(names: string[]) {\n    if (!names.length) return \"\";\n    return `\n  /** Intellisense for associations to include. */\n  export function include(\n    ...keys: (${names.map((name) => `\\n      | \"${name}\"`).join(\"\")}\n      | Omit<Includeable, string>\n    )[]\n  ) {\n    return keys;\n  }\n`;\n    // const associations = this.relations.map(it => it.)\n  }\n\n  // #region TypeBox Schema Types\n  private addTypeBoxSchemas(table: string) {\n    if (this.options.noSchemas) return \"\";\n    const fields = _.keys(this.tables[table]);\n    const fieldProps = fields\n      .map((field) => {\n        const fieldName = recase(this.options.caseProp, field);\n        const fieldObj = this.tables[table]![field] as unknown as Field;\n        return (\n          this.space[2] +\n          `${fieldName}: ${this.getTypeBoxFieldType(\n            table,\n            field,\n            fieldObj,\n            \"type\",\n          )},\\n`\n        );\n      })\n      .join(\"\");\n    return `\n  export const Row = Type.Object({\n${fieldProps.trimEnd()}\n  });\n  export type Row = Static<typeof Row>;\n`;\n  }\n\n  private getTypeBoxFieldType(\n    table: string,\n    field: string,\n    fieldObj: TSField,\n    attr: keyof TSField,\n  ) {\n    const rawFieldType = fieldObj[attr] || \"\";\n    const fieldType = String(rawFieldType).toLowerCase();\n    let tbType: string;\n\n    if (this.isArray(fieldType)) {\n      const eltype = this.getTypeBoxFieldType(\n        table,\n        field,\n        fieldObj,\n        \"elementType\",\n      );\n      tbType = `Type.Array(${eltype})`;\n    } else if (this.isNumber(fieldType)) {\n      tbType = \"Type.Number()\";\n    } else if (this.isBoolean(fieldType)) {\n      tbType = \"Type.Boolean()\";\n    } else if (this.isDate(fieldType)) {\n      tbType = \"SafeDate()\";\n    } else if (this.isString(fieldType)) {\n      const length = this.meta[table]?.[field]?.length;\n      if (length) {\n        tbType = `Type.String({ maxLength: ${length} })`;\n      } else {\n        tbType = \"Type.String()\";\n      }\n    } else if (this.isEnum(fieldType)) {\n      const values = this.getEnumValues(fieldObj);\n      tbType = `StringEnum(\"${values.join('\",\"')}\")`;\n    } else if (this.isJSON(fieldType)) {\n      tbType = \"Type.Object({})\";\n    } else {\n      console.log(`Missing TypeBox type: ${fieldType || fieldObj[\"type\"]}`);\n      tbType = \"Type.Any()\";\n    }\n    if (fieldObj.allowNull) {\n      tbType = `Maybe(${tbType})`;\n    }\n    return tbType;\n  }\n  // #endregion\n}\n"],
  "mappings": "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",
  "names": ["_"]
}

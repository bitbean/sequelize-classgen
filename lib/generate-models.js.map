{
  "version": 3,
  "sources": ["../src/generate-models.ts"],
  "sourcesContent": ["/** @file Custom runner for sequelize-auto using code from that project. */\nimport Path from \"path\";\n// import type { DialectOptions } from \"sequelize-auto/types/dialects/dialect-options\";\nimport { Options as SequelizeOptions } from \"sequelize\";\nimport { AutoOptions, SequelizeAuto, TableData } from \"sequelize-auto\";\n// import { makeTableName, qNameSplit } from \"sequelize-auto/lib/types\";\n// Local\nimport { AutoGenerator } from \"./AutoGenerator\";\nimport { AutoWriter } from \"./AutoWriter\";\n\ntype GeneratorOptions = ConstructorParameters<typeof AutoGenerator>[2];\n\nconst { dialects } = require(\"sequelize-auto/lib/dialects/dialects\");\n\nexport async function main() {\n  const configPath = Path.join(\n    process.cwd(),\n    // arg[0] = \"node.exe\", arg[1] = \"/to/node_modules/.bin/sequelize-classgen\"\n    process.argv[2] ?? \".sequelize-classgen.cjs\",\n  );\n  console.log(configPath, \"PATH FROM:\", process.argv.length, process.argv);\n  const config = require(Path.resolve(configPath)) as Partial<GeneratorOptions>;\n\n  console.log(\"Generating custom models...\");\n  await generateModels(config).catch((err) => console.error(\"\" + err));\n  console.log(\"OK\");\n}\n\nasync function generateModels(config: Partial<GeneratorOptions>) {\n  // console.log(\"CONFIG\", config); if (process) return;\n\n  const options: GeneratorOptions = {\n    //\n    // Set values or `default` same as node_modules/.bin/sequelize-auto.\n    //\n    /** @type {import(\"sequelize\").ModelOptions} */\n    additional: {\n      // These timestamp fields don't exist on every table in this project...\n      // paranoid: true,\n      // timestamps: true,\n    },\n    caseModel: \"p\",\n    caseFile: \"p\",\n    caseProp: \"o\",\n    indentation: 2,\n    lang: \"ts\",\n    noAlias: false, //            default\n    noInitModels: false, //       default\n    noIndexes: false, //          default\n    noWrite: false, //            default\n    pkSuffixes: null as any, //          default\n    singularize: true,\n    spaces: true, //              default\n    storage: config.database, //  default\n    skipTables: [\"SequelizeMeta\"], // default = null\n    skipFields: null as any, //          default\n    schema: undefined, //         default\n    /** @type {string[] | string | null} */\n    tables: null as any, //              default\n    useDefine: false, //          default\n    views: false, //              default\n    tsEsm: true,\n    initModelsDefault: true,\n    ...(config as any),\n  };\n  const sqlAuto = new SequelizeAuto(\n    options.database!,\n    options.username!,\n    options.password!,\n    options as any,\n  );\n  let td = await sqlAuto.build();\n  td = sqlAuto.relate(td);\n  const tt = generate(sqlAuto, td, options);\n  td.text = tt;\n  await write(td, options);\n  return td;\n}\n\nfunction generate(\n  sqlAuto: SequelizeAuto,\n  td: TableData,\n  options: SequelizeOptions & AutoOptions,\n) {\n  const dialect = dialects[sqlAuto.sequelize.getDialect()];\n  const generator = new AutoGenerator(td, dialect, options);\n  return generator.generateText();\n}\n\nasync function write(td: TableData, options: SequelizeOptions & AutoOptions) {\n  const writer = new AutoWriter(td, options);\n  return writer.write();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAiB;AAGjB,4BAAsD;AAGtD,2BAA8B;AAC9B,wBAA2B;AAI3B,MAAM,EAAE,SAAS,IAAI,QAAQ,sCAAsC;AAEnE,eAAsB,OAAO;AAC3B,QAAM,aAAa,YAAAA,QAAK;AAAA,IACtB,QAAQ,IAAI;AAAA;AAAA,IAEZ,QAAQ,KAAK,CAAC,KAAK;AAAA,EACrB;AACA,UAAQ,IAAI,YAAY,cAAc,QAAQ,KAAK,QAAQ,QAAQ,IAAI;AACvE,QAAM,SAAS,QAAQ,YAAAA,QAAK,QAAQ,UAAU,CAAC;AAE/C,UAAQ,IAAI,6BAA6B;AACzC,QAAM,eAAe,MAAM,EAAE,MAAM,CAAC,QAAQ,QAAQ,MAAM,KAAK,GAAG,CAAC;AACnE,UAAQ,IAAI,IAAI;AAClB;AAEA,eAAe,eAAe,QAAmC;AAG/D,QAAM,UAA4B;AAAA;AAAA;AAAA;AAAA;AAAA,IAKhC,YAAY;AAAA;AAAA;AAAA;AAAA,IAIZ;AAAA,IACA,WAAW;AAAA,IACX,UAAU;AAAA,IACV,UAAU;AAAA,IACV,aAAa;AAAA,IACb,MAAM;AAAA,IACN,SAAS;AAAA;AAAA,IACT,cAAc;AAAA;AAAA,IACd,WAAW;AAAA;AAAA,IACX,SAAS;AAAA;AAAA,IACT,YAAY;AAAA;AAAA,IACZ,aAAa;AAAA,IACb,QAAQ;AAAA;AAAA,IACR,SAAS,OAAO;AAAA;AAAA,IAChB,YAAY,CAAC,eAAe;AAAA;AAAA,IAC5B,YAAY;AAAA;AAAA,IACZ,QAAQ;AAAA;AAAA;AAAA,IAER,QAAQ;AAAA;AAAA,IACR,WAAW;AAAA;AAAA,IACX,OAAO;AAAA;AAAA,IACP,OAAO;AAAA,IACP,mBAAmB;AAAA,IACnB,GAAI;AAAA,EACN;AACA,QAAM,UAAU,IAAI;AAAA,IAClB,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR;AAAA,EACF;AACA,MAAI,KAAK,MAAM,QAAQ,MAAM;AAC7B,OAAK,QAAQ,OAAO,EAAE;AACtB,QAAM,KAAK,SAAS,SAAS,IAAI,OAAO;AACxC,KAAG,OAAO;AACV,QAAM,MAAM,IAAI,OAAO;AACvB,SAAO;AACT;AAEA,SAAS,SACP,SACA,IACA,SACA;AACA,QAAM,UAAU,SAAS,QAAQ,UAAU,WAAW,CAAC;AACvD,QAAM,YAAY,IAAI,mCAAc,IAAI,SAAS,OAAO;AACxD,SAAO,UAAU,aAAa;AAChC;AAEA,eAAe,MAAM,IAAe,SAAyC;AAC3E,QAAM,SAAS,IAAI,6BAAW,IAAI,OAAO;AACzC,SAAO,OAAO,MAAM;AACtB;",
  "names": ["Path"]
}

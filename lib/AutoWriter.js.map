{
  "version": 3,
  "sources": ["../src/AutoWriter.ts"],
  "sourcesContent": ["/**\n * @file Modified version of AutoWriter from sequelize-auto.\n * Changes:\n * - Add `tsEsm` option so TypeScript files import `.js`, e.g.\n *   `from \"./MyModel.js\"`, required for TypeScript/Node ESM compatibility.\n */\nimport type { ModelerOptions } from \"./types\";\nimport fs from \"fs\";\nimport _ from \"lodash\";\nimport path from \"path\";\nimport util from \"util\";\nimport { FKSpec, TableData } from \"sequelize-auto\";\nimport {\n  AutoOptions,\n  CaseFileOption,\n  CaseOption,\n  LangOption,\n  makeIndent,\n  makeTableName,\n  pluralize,\n  qNameSplit,\n  recase,\n  Relation,\n} from \"sequelize-auto/lib/types\";\nimport { mkdirp } from \"mkdirp\";\n\n/** Writes text into files from TableData.text, and writes init-models */\nexport class AutoWriter {\n  tableText: { [name: string]: string };\n  foreignKeys: { [tableName: string]: { [fieldName: string]: FKSpec } };\n  relations: Relation[];\n  space: string[];\n  options: {\n    caseFile?: CaseFileOption;\n    caseModel?: CaseOption;\n    caseProp?: CaseOption;\n    directory: string;\n    lang?: LangOption;\n    noAlias?: boolean;\n    noInitModels?: boolean;\n    noWrite?: boolean;\n    singularize?: boolean;\n    useDefine?: boolean;\n    spaces?: boolean;\n    indentation?: number;\n  } & ModelerOptions;\n  constructor(\n    tableData: TableData,\n    options: AutoOptions & ModelerOptions,\n  ) {\n    this.tableText = tableData.text as { [name: string]: string };\n    this.foreignKeys = tableData.foreignKeys;\n    this.relations = tableData.relations;\n    this.options = options;\n    this.space = makeIndent(this.options.spaces, this.options.indentation);\n  }\n\n  write() {\n    if (this.options.noWrite) {\n      return Promise.resolve();\n    }\n\n    mkdirp.sync(path.resolve(this.options.directory || \"./models\"));\n\n    const tables = _.keys(this.tableText);\n\n    // write the individual model files\n    const promises = tables.map((t) => {\n      return this.createFile(t);\n    });\n\n    const isTypeScript = this.options.lang === \"ts\";\n    const assoc = this.createAssociations(isTypeScript);\n\n    // get table names without schema\n    // TODO: add schema to model and file names when schema is non-default for the dialect\n    const tableNames = tables\n      .map((t) => {\n        const [_schemaName, tableName] = qNameSplit(t);\n        return tableName as string;\n      })\n      .sort();\n\n    // write the init-models file\n    if (!this.options.noInitModels) {\n      const initString = this.createInitString(\n        tableNames,\n        assoc,\n        this.options.lang,\n      );\n      const initFilePath = path.join(\n        this.options.directory,\n        \"init-models\" + (isTypeScript ? \".ts\" : \".js\"),\n      );\n      const writeFile = util.promisify(fs.writeFile);\n      const initPromise = writeFile(path.resolve(initFilePath), initString);\n      promises.push(initPromise);\n    }\n\n    return Promise.all(promises);\n  }\n  private createInitString(tableNames: string[], assoc: string, lang?: string) {\n    switch (lang) {\n      case \"ts\":\n        return this.createTsInitString(tableNames, assoc);\n      case \"esm\":\n        return this.createESMInitString(tableNames, assoc);\n      case \"es6\":\n        return this.createES5InitString(tableNames, assoc, \"const\");\n      default:\n        return this.createES5InitString(tableNames, assoc, \"var\");\n    }\n  }\n  private createFile(table: string) {\n    // FIXME: schema is not used to write the file name and there could be collisions. For now it\n    // is up to the developer to pick the right schema, and potentially chose different output\n    // folders for each different schema.\n    const [_schemaName, tableName = null] = qNameSplit(table);\n    const fileName = recase(\n      this.options.caseFile,\n      tableName,\n      this.options.singularize,\n    );\n    const filePath = path.join(\n      this.options.directory,\n      fileName + (this.options.lang === \"ts\" ? \".ts\" : \".js\"),\n    );\n\n    const writeFile = util.promisify(fs.writeFile);\n    return writeFile(path.resolve(filePath), this.tableText[table]!);\n  }\n\n  /** Create the belongsToMany/belongsTo/hasMany/hasOne association strings */\n  private createAssociations(typeScript: boolean) {\n    let strBelongs = \"\";\n    let strBelongsToMany = \"\";\n    const sp = this.space[1];\n\n    const rels = this.relations;\n    rels.forEach((rel) => {\n      if (rel.isM2M) {\n        const asprop = recase(this.options.caseProp, pluralize(rel.childProp));\n        strBelongsToMany += `${sp}${rel.parentModel}.belongsToMany(${rel.childModel}, { as: '${asprop}', through: ${rel.joinModel}, foreignKey: \"${rel.parentId}\", otherKey: \"${rel.childId}\" });\\n`;\n      } else {\n        // const bAlias = (this.options.noAlias && rel.parentModel.toLowerCase() === rel.parentProp.toLowerCase()) ? '' : `as: \"${rel.parentProp}\", `;\n        const asParentProp = recase(this.options.caseProp, rel.parentProp);\n        const bAlias = this.options.noAlias ? \"\" : `as: \"${asParentProp}\", `;\n        strBelongs += `${sp}${rel.childModel}.belongsTo(${rel.parentModel}, { ${bAlias}foreignKey: \"${rel.parentId}\"});\\n`;\n\n        const hasRel = rel.isOne ? \"hasOne\" : \"hasMany\";\n        // const hAlias = (this.options.noAlias && Utils.pluralize(rel.childModel.toLowerCase()) === rel.childProp.toLowerCase()) ? '' : `as: \"${rel.childProp}\", `;\n        const asChildProp = recase(this.options.caseProp, rel.childProp);\n        const hAlias = this.options.noAlias ? \"\" : `as: \"${asChildProp}\", `;\n        strBelongs += `${sp}${rel.parentModel}.${hasRel}(${rel.childModel}, { ${hAlias}foreignKey: \"${rel.parentId}\"});\\n`;\n      }\n    });\n\n    // belongsToMany must come first\n    return strBelongsToMany + strBelongs;\n  }\n\n  // create the TypeScript init-models file to load all the models into Sequelize\n  private createTsInitString(tables: string[], assoc: string) {\n    let str = 'import type { Sequelize } from \"sequelize\";\\n';\n    const sp = this.space[1];\n    const fileNames: string[] = [];\n    const modelNames: string[] = [];\n    // import statements\n    tables.forEach((t) => {\n      const fileName = recase(\n        this.options.caseFile,\n        t,\n        this.options.singularize,\n      );\n      fileNames.push(fileName);\n      const modelName = makeTableName(\n        this.options.caseModel,\n        t,\n        this.options.singularize,\n        this.options.lang,\n      );\n      modelNames.push(modelName);\n      if (this.options.lang === \"ts\" && this.options.tsEsm) {\n        // NOTE: For \"Node modules\" compat, import .js file even for .ts files.\n        str += `import { ${modelName} } from \"./${fileName}.js\";\\n`;\n      } else {\n        str += `import { ${modelName} } from \"./${fileName}\";\\n`;\n      }\n    });\n    // export models\n    str += \"\\n\";\n    if (this.options.lang === \"ts\" && this.options.tsEsm) {\n      fileNames.forEach((fileName) => {\n        // NOTE: For \"Node modules\" compat, export .js file even for .ts files.\n        str += `export * from \"./${fileName}.js\";\\n`;\n      });\n    } else {\n      fileNames.forEach((fileName) => {\n        str += `export * from \"./${fileName}\";\\n`;\n      });\n    }\n    str += \"\\n\";\n    // create the initialization function\n    str += `export ${\n      this.options.initModelsDefault ? \"default \" : \"\"\n    }function initModels(sequelize: Sequelize) {\\n`;\n    modelNames.forEach((m) => {\n      str += `${sp}${m}.initModel(sequelize);\\n`;\n    });\n\n    // add the asociations\n    str += \"\\n\" + assoc;\n\n    // // return the models\n    // str += `\\n${sp}return {\\n`;\n    // modelNames.forEach((m) => {\n    //   str += `${this.space[2]}${m}: ${m},\\n`;\n    // });\n    // str += `${sp}};\\n`;\n    str += \"}\\n\";\n\n    return str;\n  }\n\n  // create the ES5 init-models file to load all the models into Sequelize\n  private createES5InitString(tables: string[], assoc: string, vardef: string) {\n    let str = `${vardef} DataTypes = require(\"sequelize\").DataTypes;\\n`;\n    const sp = this.space[1];\n    const modelNames: string[] = [];\n    // import statements\n    tables.forEach((t) => {\n      const fileName = recase(\n        this.options.caseFile,\n        t,\n        this.options.singularize,\n      );\n      const modelName = makeTableName(\n        this.options.caseModel,\n        t,\n        this.options.singularize,\n        this.options.lang,\n      );\n      modelNames.push(modelName);\n      str += `${vardef} _${modelName} = require(\"./${fileName}\");\\n`;\n    });\n\n    // create the initialization function\n    str += \"\\nfunction initModels(sequelize) {\\n\";\n    modelNames.forEach((m) => {\n      str += `${sp}${vardef} ${m} = _${m}(sequelize, DataTypes);\\n`;\n    });\n\n    // add the asociations\n    str += \"\\n\" + assoc;\n\n    // return the models\n    str += `\\n${sp}return {\\n`;\n    modelNames.forEach((m) => {\n      str += `${this.space[2]}${m},\\n`;\n    });\n    str += `${sp}};\\n`;\n    str += \"}\\n\";\n    str += \"module.exports = initModels;\\n\";\n    str += \"module.exports.initModels = initModels;\\n\";\n    str += \"module.exports.default = initModels;\\n\";\n    return str;\n  }\n\n  // create the ESM init-models file to load all the models into Sequelize\n  private createESMInitString(tables: string[], assoc: string) {\n    let str = 'import _sequelize from \"sequelize\";\\n';\n    str += \"const DataTypes = _sequelize.DataTypes;\\n\";\n    const sp = this.space[1];\n    const modelNames: string[] = [];\n    // import statements\n    tables.forEach((t) => {\n      const fileName = recase(\n        this.options.caseFile,\n        t,\n        this.options.singularize,\n      );\n      const modelName = makeTableName(\n        this.options.caseModel,\n        t,\n        this.options.singularize,\n        this.options.lang,\n      );\n      modelNames.push(modelName);\n      str += `import _${modelName} from  \"./${fileName}.js\";\\n`;\n    });\n    // create the initialization function\n    str += \"\\nexport default function initModels(sequelize) {\\n\";\n    modelNames.forEach((m) => {\n      str += `${sp}const ${m} = _${m}.init(sequelize, DataTypes);\\n`;\n    });\n\n    // add the associations\n    str += \"\\n\" + assoc;\n\n    // return the models\n    str += `\\n${sp}return {\\n`;\n    modelNames.forEach((m) => {\n      str += `${this.space[2]}${m},\\n`;\n    });\n    str += `${sp}};\\n`;\n    str += \"}\\n\";\n    return str;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,gBAAe;AACf,oBAAc;AACd,kBAAiB;AACjB,kBAAiB;AAEjB,mBAWO;AACP,oBAAuB;AAGhB,MAAM,WAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAcA,YACE,WACA,SACA;AACA,SAAK,YAAY,UAAU;AAC3B,SAAK,cAAc,UAAU;AAC7B,SAAK,YAAY,UAAU;AAC3B,SAAK,UAAU;AACf,SAAK,YAAQ,yBAAW,KAAK,QAAQ,QAAQ,KAAK,QAAQ,WAAW;AAAA,EACvE;AAAA,EAEA,QAAQ;AACN,QAAI,KAAK,QAAQ,SAAS;AACxB,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAEA,yBAAO,KAAK,YAAAA,QAAK,QAAQ,KAAK,QAAQ,aAAa,UAAU,CAAC;AAE9D,UAAM,SAAS,cAAAC,QAAE,KAAK,KAAK,SAAS;AAGpC,UAAM,WAAW,OAAO,IAAI,CAAC,MAAM;AACjC,aAAO,KAAK,WAAW,CAAC;AAAA,IAC1B,CAAC;AAED,UAAM,eAAe,KAAK,QAAQ,SAAS;AAC3C,UAAM,QAAQ,KAAK,mBAAmB,YAAY;AAIlD,UAAM,aAAa,OAChB,IAAI,CAAC,MAAM;AACV,YAAM,CAAC,aAAa,SAAS,QAAI,yBAAW,CAAC;AAC7C,aAAO;AAAA,IACT,CAAC,EACA,KAAK;AAGR,QAAI,CAAC,KAAK,QAAQ,cAAc;AAC9B,YAAM,aAAa,KAAK;AAAA,QACtB;AAAA,QACA;AAAA,QACA,KAAK,QAAQ;AAAA,MACf;AACA,YAAM,eAAe,YAAAD,QAAK;AAAA,QACxB,KAAK,QAAQ;AAAA,QACb,iBAAiB,eAAe,QAAQ;AAAA,MAC1C;AACA,YAAM,YAAY,YAAAE,QAAK,UAAU,UAAAC,QAAG,SAAS;AAC7C,YAAM,cAAc,UAAU,YAAAH,QAAK,QAAQ,YAAY,GAAG,UAAU;AACpE,eAAS,KAAK,WAAW;AAAA,IAC3B;AAEA,WAAO,QAAQ,IAAI,QAAQ;AAAA,EAC7B;AAAA,EACQ,iBAAiB,YAAsB,OAAe,MAAe;AAC3E,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,eAAO,KAAK,mBAAmB,YAAY,KAAK;AAAA,MAClD,KAAK;AACH,eAAO,KAAK,oBAAoB,YAAY,KAAK;AAAA,MACnD,KAAK;AACH,eAAO,KAAK,oBAAoB,YAAY,OAAO,OAAO;AAAA,MAC5D;AACE,eAAO,KAAK,oBAAoB,YAAY,OAAO,KAAK;AAAA,IAC5D;AAAA,EACF;AAAA,EACQ,WAAW,OAAe;AAIhC,UAAM,CAAC,aAAa,YAAY,IAAI,QAAI,yBAAW,KAAK;AACxD,UAAM,eAAW;AAAA,MACf,KAAK,QAAQ;AAAA,MACb;AAAA,MACA,KAAK,QAAQ;AAAA,IACf;AACA,UAAM,WAAW,YAAAA,QAAK;AAAA,MACpB,KAAK,QAAQ;AAAA,MACb,YAAY,KAAK,QAAQ,SAAS,OAAO,QAAQ;AAAA,IACnD;AAEA,UAAM,YAAY,YAAAE,QAAK,UAAU,UAAAC,QAAG,SAAS;AAC7C,WAAO,UAAU,YAAAH,QAAK,QAAQ,QAAQ,GAAG,KAAK,UAAU,KAAK,CAAE;AAAA,EACjE;AAAA;AAAA,EAGQ,mBAAmB,YAAqB;AAC9C,QAAI,aAAa;AACjB,QAAI,mBAAmB;AACvB,UAAM,KAAK,KAAK,MAAM,CAAC;AAEvB,UAAM,OAAO,KAAK;AAClB,SAAK,QAAQ,CAAC,QAAQ;AACpB,UAAI,IAAI,OAAO;AACb,cAAM,aAAS,qBAAO,KAAK,QAAQ,cAAU,wBAAU,IAAI,SAAS,CAAC;AACrE,4BAAoB,GAAG,EAAE,GAAG,IAAI,WAAW,kBAAkB,IAAI,UAAU,YAAY,MAAM,eAAe,IAAI,SAAS,kBAAkB,IAAI,QAAQ,iBAAiB,IAAI,OAAO;AAAA;AAAA,MACrL,OAAO;AAEL,cAAM,mBAAe,qBAAO,KAAK,QAAQ,UAAU,IAAI,UAAU;AACjE,cAAM,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,YAAY;AAC/D,sBAAc,GAAG,EAAE,GAAG,IAAI,UAAU,cAAc,IAAI,WAAW,OAAO,MAAM,gBAAgB,IAAI,QAAQ;AAAA;AAE1G,cAAM,SAAS,IAAI,QAAQ,WAAW;AAEtC,cAAM,kBAAc,qBAAO,KAAK,QAAQ,UAAU,IAAI,SAAS;AAC/D,cAAM,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,WAAW;AAC9D,sBAAc,GAAG,EAAE,GAAG,IAAI,WAAW,IAAI,MAAM,IAAI,IAAI,UAAU,OAAO,MAAM,gBAAgB,IAAI,QAAQ;AAAA;AAAA,MAC5G;AAAA,IACF,CAAC;AAGD,WAAO,mBAAmB;AAAA,EAC5B;AAAA;AAAA,EAGQ,mBAAmB,QAAkB,OAAe;AAC1D,QAAI,MAAM;AACV,UAAM,KAAK,KAAK,MAAM,CAAC;AACvB,UAAM,YAAsB,CAAC;AAC7B,UAAM,aAAuB,CAAC;AAE9B,WAAO,QAAQ,CAAC,MAAM;AACpB,YAAM,eAAW;AAAA,QACf,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,KAAK,QAAQ;AAAA,MACf;AACA,gBAAU,KAAK,QAAQ;AACvB,YAAM,gBAAY;AAAA,QAChB,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,KAAK,QAAQ;AAAA,QACb,KAAK,QAAQ;AAAA,MACf;AACA,iBAAW,KAAK,SAAS;AACzB,UAAI,KAAK,QAAQ,SAAS,QAAQ,KAAK,QAAQ,OAAO;AAEpD,eAAO,YAAY,SAAS,cAAc,QAAQ;AAAA;AAAA,MACpD,OAAO;AACL,eAAO,YAAY,SAAS,cAAc,QAAQ;AAAA;AAAA,MACpD;AAAA,IACF,CAAC;AAED,WAAO;AACP,QAAI,KAAK,QAAQ,SAAS,QAAQ,KAAK,QAAQ,OAAO;AACpD,gBAAU,QAAQ,CAAC,aAAa;AAE9B,eAAO,oBAAoB,QAAQ;AAAA;AAAA,MACrC,CAAC;AAAA,IACH,OAAO;AACL,gBAAU,QAAQ,CAAC,aAAa;AAC9B,eAAO,oBAAoB,QAAQ;AAAA;AAAA,MACrC,CAAC;AAAA,IACH;AACA,WAAO;AAEP,WAAO,UACL,KAAK,QAAQ,oBAAoB,aAAa,EAChD;AAAA;AACA,eAAW,QAAQ,CAAC,MAAM;AACxB,aAAO,GAAG,EAAE,GAAG,CAAC;AAAA;AAAA,IAClB,CAAC;AAGD,WAAO,OAAO;AAQd,WAAO;AAEP,WAAO;AAAA,EACT;AAAA;AAAA,EAGQ,oBAAoB,QAAkB,OAAe,QAAgB;AAC3E,QAAI,MAAM,GAAG,MAAM;AAAA;AACnB,UAAM,KAAK,KAAK,MAAM,CAAC;AACvB,UAAM,aAAuB,CAAC;AAE9B,WAAO,QAAQ,CAAC,MAAM;AACpB,YAAM,eAAW;AAAA,QACf,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,KAAK,QAAQ;AAAA,MACf;AACA,YAAM,gBAAY;AAAA,QAChB,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,KAAK,QAAQ;AAAA,QACb,KAAK,QAAQ;AAAA,MACf;AACA,iBAAW,KAAK,SAAS;AACzB,aAAO,GAAG,MAAM,KAAK,SAAS,iBAAiB,QAAQ;AAAA;AAAA,IACzD,CAAC;AAGD,WAAO;AACP,eAAW,QAAQ,CAAC,MAAM;AACxB,aAAO,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC;AAAA;AAAA,IACpC,CAAC;AAGD,WAAO,OAAO;AAGd,WAAO;AAAA,EAAK,EAAE;AAAA;AACd,eAAW,QAAQ,CAAC,MAAM;AACxB,aAAO,GAAG,KAAK,MAAM,CAAC,CAAC,GAAG,CAAC;AAAA;AAAA,IAC7B,CAAC;AACD,WAAO,GAAG,EAAE;AAAA;AACZ,WAAO;AACP,WAAO;AACP,WAAO;AACP,WAAO;AACP,WAAO;AAAA,EACT;AAAA;AAAA,EAGQ,oBAAoB,QAAkB,OAAe;AAC3D,QAAI,MAAM;AACV,WAAO;AACP,UAAM,KAAK,KAAK,MAAM,CAAC;AACvB,UAAM,aAAuB,CAAC;AAE9B,WAAO,QAAQ,CAAC,MAAM;AACpB,YAAM,eAAW;AAAA,QACf,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,KAAK,QAAQ;AAAA,MACf;AACA,YAAM,gBAAY;AAAA,QAChB,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,KAAK,QAAQ;AAAA,QACb,KAAK,QAAQ;AAAA,MACf;AACA,iBAAW,KAAK,SAAS;AACzB,aAAO,WAAW,SAAS,aAAa,QAAQ;AAAA;AAAA,IAClD,CAAC;AAED,WAAO;AACP,eAAW,QAAQ,CAAC,MAAM;AACxB,aAAO,GAAG,EAAE,SAAS,CAAC,OAAO,CAAC;AAAA;AAAA,IAChC,CAAC;AAGD,WAAO,OAAO;AAGd,WAAO;AAAA,EAAK,EAAE;AAAA;AACd,eAAW,QAAQ,CAAC,MAAM;AACxB,aAAO,GAAG,KAAK,MAAM,CAAC,CAAC,GAAG,CAAC;AAAA;AAAA,IAC7B,CAAC;AACD,WAAO,GAAG,EAAE;AAAA;AACZ,WAAO;AACP,WAAO;AAAA,EACT;AACF;",
  "names": ["path", "_", "util", "fs"]
}
